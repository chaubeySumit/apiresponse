/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'javax.activation:javax.activation-api:1.2.0'
    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:6.14.3'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.29.1'
    implementation 'org.glassfish.jersey.core:jersey-common:2.26'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.4.0'
    compile group: 'org.json', name: 'json', version: '20090211'
    compile group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    testCompile group: 'org.slf4j', name: 'slf4j-jdk14', version: '2.0.0-alpha1'


}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


test {
    // Use TestNG for unit tests
    useTestNG()
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // Fail the 'test' task on the first test failure
    failFast = true

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}
